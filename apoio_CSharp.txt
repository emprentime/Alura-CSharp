CURSO DE C# PARTE 1: PRIMEIROS PASSOS
INSTRUTOR(A): GUILHERME MATHEUS COSTA

Toda aplicação .NET é escrita em uma linguagem compilada para o código intermediário MSIL (Microsoft intermediate language);

O .NET Framework é uma biblioteca utilizada pelas aplicações .NET;

Uma aplicação .NET é compilada para o MSIL;

O código MSIL é executado pela máquina virtual do .NET, a CLR (common language runtime);

O just-in-time compiler é uma parte da CLR que transforma MSIL em código de máquina, apenas em tempo de execução.


SOBRE A COMPILAÇÃO E EXECUÇÃO:

1 - Durante a compilação acontece uma verificação sintática do código fonte.

2 - Na compilação e execução podem aparecer erros.

3 - Quando executamos o programa compilado, a CLR lê e executa o código MSIL gerado.

4 - O compilador gera o MSIL caso não tenha nenhum erro sintático no código fonte.

Podemos programar em C# utilizando editores de textos e IDEs.

Um IDE é um ambiente integrado de desenvolvimento que centraliza em um único lugar: compilador da linguagem utilizada, editor de texto, documentação, banco de dados e tudo que gira em torno da criação de aplicações.

Por esta razão, desenvolver em IDE é bastante produtivo.

OPERAÇÕES ENTRE NÚMEROS:

Aprendemos que é possível fazer operações entre números. Podemos até fazer operações aritméticas com variáveis de tipos diferentes, como multiplicar um inteiro por um número de ponto flutuante (int e double).

O tipo int (inteiro) suporta um número que vai de -2 elevado a 31 até 2 elevado a 31.
O int ocupa 32 bits na memória do computador.

Se quisermos guardar em uma variável a idade do universo, que são 13 bilhões de anos, que ultrapassa o limite do tipo int, o compilador vai indicar um erro.

Não podemos guardar esse valor elevado em uma variável do tipo inteiro, se precisarmos manipular um número como este, teremos que alterar o tipo da variável. No caso, adotaremos uma variável do tipo long, que também trabalha com números inteiros e suporta valores maiores por ter um limite de 64 bits, o dobro do limite do int.

A variável do tipo short é de 16 bits, ou seja, o valor NÃO pode ser MAIOR do que 16 mil. Um valor maior do que esse, o compilador vai apontar um erro.

Para comparar cada tipo primitivo de forma mais clara, a tabela abaixo mostra qual o tamanho de cada um.

TIPO TAMANHO

boolean -- 1 byte
byte    -- 1 byte
short   -- 2 bytes
char    -- 2 bytes
int     -- 4 bytes
float   -- 4 bytes
long    -- 8 bytes
double  -- 8 bytes

INSTRUTOR(A): Guilherme Matheus Costa

DIFERENÇA ENTRE PASSAGEM POR VALOR E PASSAGEM POR REFERÊNCIA:

A definição mais simples e de alto nível que consigo pensar, é:

Na passagem por valor, é passada uma cópia do valor da variável.

Na passagem por referência, é passada uma referência à própria variável.

Isso é verdade independetemente do tipo da variável.

Ou seja, não importa se o tipo de uma variável é primitivo ou complexo, a afirmação acima é sempre verdadeira.

Fonte: https://pt.stackoverflow.com/questions/59437/qual-a-diferen%C3%A7a-entre-passagem-por-valor-e-passagem-por-refer%C3%AAncia

APRENDEMOS:

O conceito e como declarar char e String;

Como concatenar Strings;

Variáveis guardam valores e não referências.

INSTRUTOR(A): Guilherme Matheus Costa

IF/ELSE:

A estrutura condicional if/else é um recurso que indica quais instruções o sistema deve processar de acordo com uma expressão booleana. Assim, o sistema testa se uma condição é verdadeira e então executa comandos de acordo com esse resultado.

Fonte:https://www.devmedia.com.br/csharp-if-else-e-o-operador-ternario/38192


TIPOS DE OPERADORES DO C#

Operador de Atribuição:

O símbolo igual (=) representa a atribuição de um valor à uma variável, onde ela e o valor atribuído devem obrigatoriamente ser de tipos compatíveis, ou seja, uma variável do tipo int por exemplo não pode receber um valor do tipo string (a menos que usemos as conversões, mas vamos deixar isso mais para frente).

Veja a sintaxe: variável = atribuição;

Operadores Aritméticos:

Os operadores aritméticos descritos na Tabela 1 são os mesmos usados em cálculos matemáticos.

Operador Aritmético -------- Descrição
+ -------- Adição
- -------- Subtração
* -------- Multiplicação
/ -------- Divisão
% -------- Módulo (resto da divisão)


Operadores Aritméticos de Atribuição Reduzida

Operador Aritmético -------- Descrição
+= -------- mais igual
-= -------- menos igual
*= -------- vezes igual
/= -------- dividido igual
%= -------- módulo igual


Operadores incrementais e decrementais

Os operadores incrementais e decrementais têm a função de aumentar ou diminuir exatamente em 1 o valor de uma variável. Eles podem ser pré ou pós incremental e pré ou pós decremental. Veja os conceitos de cada um deles e um exemplo prático a seguir:

Incremental (++):

Pré incremental ou prefixo – Significa que, se o sinal for colocado antes da variável, primeiramente será somado o valor 1 para esta variável, continuando em seguida a resolução da expressão.
Pós incremental ou sufixo – Significa que, se o sinal for colocado após a variável, é resolvido primeiro a expressão, seja ela adição, subtração, multiplicação ou qualquer outra, para em seguida ser adicionado o valor 1 à variável.

Decremental (--):

Pré incremental ou prefixo – Significa que, se o sinal for colocado antes da variável, primeiramente será subtraído o valor 1 para esta variável, continuando em seguida a resolução da expressão.
Pós incremental ou sufixo – Significa que, se o sinal for colocado após a variável, é resolvido primeiro a expressão, seja ela adição, subtração, multiplicação ou qualquer outra, para em seguida ser subtraído o valor 1 à variável.


Operadores Relacionais

Os operadores relacionais comparam dois valores e retornam um valor booleano (true ou false). Veja na Tabela 3 esses operadores.

Operador Relacional -------- Descrição
== -------- Igual a
!= -------- Diferente de
>  -------- Maior que
<  -------- Menor que
>= -------- Maior do que ou igual a
<= -------- Menor do que ou igual a

Operadores Lógicos

Os operadores lógicos trabalham como operandos booleanos e seu resultado também será booleano (true ou false). Eles são usados somente em expressões lógicas, e são descritos na Tabela 4.

Operador Lógico	Descrição
&& -------- AND = E
|| -------- OR = Ou
!  -------- NOT = Não


Operadores Ternários

O operador ternário é composto por três operandos separados pelos sinais ? e : e tem o objetivo de atribuir o valor a uma variável de acordo com o resultado de um teste lógico. A sintaxe dele é: teste lógico ? valor se verdadeiro : valor se falso;

Onde:

teste lógico é qualquer valor ou expressão, que pode ser verdadeiro ou falso.
valor se verdadeiro é atribuído ao valor true;
valor se falso é atribuído ao valor false.
Finalizando, veja o exemplo na Listagem 9 e o resultado em seguida.

int x = 5, y = 10; // declaradas duas variáveis de tipo int

Console.WriteLine(x < y ? "sim" : "não"); // expressão x < y é avaliada
// se for verdadeira exibe "sim"
// se não for verdadeira exibe "não"
Console.ReadKey();

Fonte: https://www.devmedia.com.br/tipos-de-operadores-do-csharp/18873